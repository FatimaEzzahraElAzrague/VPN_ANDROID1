package com.myapp.backend.services

import com.myapp.backend.models.*
import com.myapp.backend.util.Logger
import java.time.LocalDateTime
import java.util.concurrent.ConcurrentHashMap

class MalwareProtectionService private constructor() {
    
    companion object {
        @Volatile
        private var INSTANCE: MalwareProtectionService? = null
        
        fun getInstance(): MalwareProtectionService {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: MalwareProtectionService().also { INSTANCE = it }
            }
        }
    }
    
    // In-memory storage (replace with database in production)
    private val userConfigs = ConcurrentHashMap<String, MalwareProtectionConfig>()
    private val threatDatabase = ConcurrentHashMap<String, ThreatInfo>()
    private val urlReputation = ConcurrentHashMap<String, ReputationScore>()
    private val fileHashes = ConcurrentHashMap<String, FileThreatInfo>()
    
    init {
        initializeThreatDatabase()
        initializeUrlReputation()
        initializeFileHashes()
    }
    
    private fun initializeThreatDatabase() {
        // Initialize with known malicious domains and IPs
        val maliciousDomains = mapOf(
            "malware.example.com" to ThreatInfo(ThreatType.MALWARE, ThreatSeverity.HIGH),
            "phishing.example.com" to ThreatInfo(ThreatType.PHISHING, ThreatSeverity.CRITICAL),
            "scam.example.com" to ThreatInfo(ThreatType.PHISHING, ThreatSeverity.HIGH),
            "botnet.example.com" to ThreatInfo(ThreatType.MALWARE, ThreatSeverity.CRITICAL),
            "ransomware.example.com" to ThreatInfo(ThreatType.MALWARE, ThreatSeverity.CRITICAL)
        )
        
        threatDatabase.putAll(maliciousDomains)
    }
    
    private fun initializeUrlReputation() {
        // Initialize URL reputation scores
        val urls = mapOf(
            "https://malware.example.com" to ReputationScore(-100, ThreatSeverity.CRITICAL),
            "https://phishing.example.com" to ReputationScore(-90, ThreatSeverity.CRITICAL),
            "https://scam.example.com" to ReputationScore(-80, ThreatSeverity.HIGH),
            "https://suspicious.example.com" to ReputationScore(-50, ThreatSeverity.MEDIUM),
            "https://safe.example.com" to ReputationScore(90, ThreatSeverity.LOW)
        )
        
        urlReputation.putAll(urls)
    }
    
    private fun initializeFileHashes() {
        // Initialize known malicious file hashes
        val maliciousFiles = mapOf(
            "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" to FileThreatInfo(
                "malware.exe",
                ThreatType.MALWARE,
                ThreatSeverity.CRITICAL,
                "Known ransomware variant"
            ),
            "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" to FileThreatInfo(
                "trojan.exe",
                ThreatType.MALWARE,
                ThreatSeverity.HIGH,
                "Trojan horse detected"
            )
        )
        
        fileHashes.putAll(maliciousFiles)
    }
    
    fun getMalwareProtectionConfig(userId: String): MalwareProtectionConfig {
        return userConfigs[userId] ?: createDefaultConfig(userId)
    }
    
    fun updateMalwareProtectionConfig(userId: String, request: MalwareProtectionRequest): MalwareProtectionConfig {
        val currentConfig = getMalwareProtectionConfig(userId)
        
        val updatedConfig = currentConfig.copy(
            enabled = request.enabled,
            realTimeScanning = request.realTimeScanning ?: currentConfig.realTimeScanning,
            urlFiltering = request.urlFiltering ?: currentConfig.urlFiltering,
            fileScanning = request.fileScanning ?: currentConfig.fileScanning,
            lastUpdated = LocalDateTime.now()
        )
        
        userConfigs[userId] = updatedConfig
        Logger.info("Updated malware protection config for user: $userId")
        
        return updatedConfig
    }
    
    fun checkUrl(userId: String, url: String): ThreatReport? {
        val config = getMalwareProtectionConfig(userId)
        if (!config.enabled || !config.urlFiltering) return null
        
        val domain = extractDomain(url)
        val reputation = urlReputation[url] ?: getUrlReputation(url)
        
        if (reputation.score < -50) {
            val threatReport = createThreatReport(
                userId = userId,
                threatType = reputation.threatType,
                severity = reputation.threatSeverity,
                source = url,
                description = "Malicious URL detected: ${reputation.description}"
            )
            
            incrementStats(userId, "maliciousUrls")
            Logger.info("Blocked malicious URL: $url for user: $userId")
            
            return threatReport
        }
        
        return null
    }
    
    fun checkDomain(userId: String, domain: String): ThreatReport? {
        val config = getMalwareProtectionConfig(userId)
        if (!config.enabled) return null
        
        val threatInfo = threatDatabase[domain]
        if (threatInfo != null) {
            val threatReport = createThreatReport(
                userId = userId,
                threatType = threatInfo.threatType,
                severity = threatInfo.threatSeverity,
                source = domain,
                description = "Malicious domain detected: ${threatInfo.description}"
            )
            
            incrementStats(userId, "threatsBlocked")
            Logger.info("Blocked malicious domain: $domain for user: $userId")
            
            return threatReport
        }
        
        return null
    }
    
    fun scanFile(userId: String, fileName: String, fileHash: String): ThreatReport? {
        val config = getMalwareProtectionConfig(userId)
        if (!config.enabled || !config.fileScanning) return null
        
        val fileThreatInfo = fileHashes[fileHash]
        if (fileThreatInfo != null) {
            val threatReport = createThreatReport(
                userId = userId,
                threatType = fileThreatInfo.threatType,
                severity = fileThreatInfo.threatSeverity,
                source = fileName,
                description = fileThreatInfo.description
            )
            
            incrementStats(userId, "suspiciousFiles")
            Logger.info("Blocked malicious file: $fileName for user: $userId")
            
            return threatReport
        }
        
        // Perform heuristic analysis
        if (isFileSuspicious(fileName, fileHash)) {
            val threatReport = createThreatReport(
                userId = userId,
                threatType = ThreatType.MALWARE,
                severity = ThreatSeverity.MEDIUM,
                source = fileName,
                description = "File flagged as suspicious by heuristic analysis"
            )
            
            incrementStats(userId, "suspiciousFiles")
            Logger.info("Flagged suspicious file: $fileName for user: $userId")
            
            return threatReport
        }
        
        return null
    }
    
    fun getThreatDatabase(): Map<String, ThreatInfo> {
        return threatDatabase.toMap()
    }
    
    fun addThreatToDatabase(domain: String, threatType: ThreatType, severity: ThreatSeverity, description: String) {
        val threatInfo = ThreatInfo(threatType, severity, description)
        threatDatabase[domain] = threatInfo
        Logger.info("Added threat to database: $domain - $threatType")
    }
    
    fun removeThreatFromDatabase(domain: String): Boolean {
        val removed = threatDatabase.remove(domain)
        if (removed != null) {
            Logger.info("Removed threat from database: $domain")
        }
        return removed != null
    }
    
    fun getStats(userId: String): MalwareProtectionStats {
        val config = getMalwareProtectionConfig(userId)
        return config.stats
    }
    
    fun resetStats(userId: String): MalwareProtectionConfig {
        val config = getMalwareProtectionConfig(userId)
        val resetStats = MalwareProtectionStats(
            lastReset = LocalDateTime.now()
        )
        
        val updatedConfig = config.copy(
            stats = resetStats,
            lastUpdated = LocalDateTime.now()
        )
        
        userConfigs[userId] = updatedConfig
        Logger.info("Reset stats for user: $userId")
        
        return updatedConfig
    }
    
    fun updateThreatDatabase(): Boolean {
        try {
            // In a real implementation, this would fetch updated threat data from external sources
            Logger.info("Updating threat database from external sources")
            
            // Simulate updating threat database
            Thread.sleep(2000)
            
            Logger.info("Threat database updated successfully")
            return true
        } catch (e: Exception) {
            Logger.error("Failed to update threat database: ${e.message}")
            return false
        }
    }
    
    private fun createDefaultConfig(userId: String): MalwareProtectionConfig {
        val defaultConfig = MalwareProtectionConfig(
            userId = userId,
            enabled = false,
            realTimeScanning = true,
            urlFiltering = true,
            fileScanning = false
        )
        
        userConfigs[userId] = defaultConfig
        Logger.info("Created default malware protection config for user: $userId")
        
        return defaultConfig
    }
    
    private fun extractDomain(url: String): String {
        return try {
            val uri = java.net.URI(url)
            uri.host ?: url
        } catch (e: Exception) {
            url
        }
    }
    
    private fun getUrlReputation(url: String): ReputationScore {
        // In a real implementation, this would query external reputation services
        // For now, return a neutral score
        return ReputationScore(0, ThreatSeverity.LOW)
    }
    
    private fun isFileSuspicious(fileName: String, fileHash: String): Boolean {
        // Heuristic analysis based on file characteristics
        val suspiciousExtensions = listOf(".exe", ".bat", ".cmd", ".scr", ".pif", ".com")
        val suspiciousNames = listOf("setup", "install", "update", "patch", "crack", "keygen")
        
        val hasSuspiciousExtension = suspiciousExtensions.any { fileName.endsWith(it, ignoreCase = true) }
        val hasSuspiciousName = suspiciousNames.any { fileName.contains(it, ignoreCase = true) }
        
        return hasSuspiciousExtension && hasSuspiciousName
    }
    
    private fun incrementStats(userId: String, statType: String) {
        val config = getMalwareProtectionConfig(userId)
        val currentStats = config.stats
        
        val updatedStats = when (statType) {
            "threatsBlocked" -> currentStats.copy(
                threatsBlocked = currentStats.threatsBlocked + 1,
                lastThreat = LocalDateTime.now()
            )
            "maliciousUrls" -> currentStats.copy(
                maliciousUrls = currentStats.maliciousUrls + 1,
                lastThreat = LocalDateTime.now()
            )
            "suspiciousFiles" -> currentStats.copy(
                suspiciousFiles = currentStats.suspiciousFiles + 1,
                lastThreat = LocalDateTime.now()
            )
            else -> currentStats
        }
        
        val updatedConfig = config.copy(
            stats = updatedStats,
            lastUpdated = LocalDateTime.now()
        )
        
        userConfigs[userId] = updatedConfig
    }
    
    private fun createThreatReport(
        userId: String,
        threatType: ThreatType,
        severity: ThreatSeverity,
        source: String,
        description: String
    ): ThreatReport {
        return ThreatReport(
            id = java.util.UUID.randomUUID().toString(),
            userId = userId,
            threatType = threatType,
            severity = severity,
            source = source,
            description = description,
            timestamp = LocalDateTime.now(),
            blocked = true
        )
    }
    
    // Helper data classes
    private data class ThreatInfo(
        val threatType: ThreatType,
        val threatSeverity: ThreatSeverity,
        val description: String = "Malicious content detected"
    )
    
    private data class ReputationScore(
        val score: Int, // -100 to 100
        val threatSeverity: ThreatSeverity,
        val description: String = "URL reputation analysis"
    )
    
    private data class FileThreatInfo(
        val fileName: String,
        val threatType: ThreatType,
        val threatSeverity: ThreatSeverity,
        val description: String
    )
}
